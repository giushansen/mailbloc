<Layouts.site flash={@flash} current_scope={@current_scope}>
  <!-- Documentation Page -->
  <div class="flex min-h-screen bg-base-100">
    <!-- Mobile Hamburger Menu -->
    <div class="lg:hidden fixed top-20 left-4 z-50">
      <button id="toggleSidebar" class="btn btn-ghost btn-sm bg-base-100/50 hover:bg-base-100/75 border border-base-300/50">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
      </button>
    </div>

    <!-- Left Navigation -->
    <aside id="sidebar" class="w-64 bg-base-200 shadow-md p-4 fixed top-16 bottom-0 overflow-y-auto lg:block hidden z-40">
      <ul class="menu menu-compact">
        <li>
          <a class="font-bold text-xl text-base-content">Docs</a>
        </li>
        <li>
          <details class="dropdown" id="section-getting-started" open>
            <summary class="cursor-pointer flex items-center gap-2 font-bold" data-section="getting-started">
              <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Getting Started
            </summary>
            <ul class="menu menu-compact pl-4">
              <li><a href="#overview">Overview</a></li>
              <li><a href="#installation">Installation Methods</a></li>
            </ul>
          </details>
        </li>
        <li>
          <details class="dropdown" id="section-language-runtimes">
            <summary class="cursor-pointer flex items-center gap-2 font-bold" data-section="language-runtimes">
              <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Language Runtimes
            </summary>
            <ul class="menu menu-compact pl-4">
              <li><a href="#curl">cURL</a></li>
              <li><a href="#javascript">JavaScript</a></li>
              <li><a href="#python">Python</a></li>
              <li><a href="#php">PHP</a></li>
              <li><a href="#ruby">Ruby</a></li>
              <li><a href="#java">Java</a></li>
              <li><a href="#go">Go</a></li>
              <li><a href="#elixir">Elixir</a></li>
            </ul>
          </details>
        </li>
        <li>
          <details class="dropdown" id="section-web-servers">
            <summary class="cursor-pointer flex items-center gap-2 font-bold" data-section="web-servers">
              <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Web Servers
            </summary>
            <ul class="menu menu-compact pl-4">
              <li><a href="#nginx">NGINX</a></li>
              <li><a href="#apache">Apache</a></li>
            </ul>
          </details>
        </li>
        <li>
          <details class="dropdown" id="section-framework-integration">
            <summary class="cursor-pointer flex items-center gap-2 font-bold" data-section="framework-integration">
              <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Framework Integration
            </summary>
            <ul class="menu menu-compact pl-4">
              <li><a href="#nodejs">Node.js</a></li>
              <li><a href="#nextjs">Next.js</a></li>
              <li><a href="#express">Express</a></li>
              <li><a href="#asp">ASP.NET</a></li>
              <li><a href="#flask">Flask</a></li>
              <li><a href="#django">Django</a></li>
              <li><a href="#wordpress">WordPress</a></li>
              <li><a href="#fastapi">FastAPI</a></li>
              <li><a href="#laravel">Laravel</a></li>
              <li><a href="#rails">Rails</a></li>
              <li><a href="#symfony">Symfony</a></li>
            </ul>
          </details>
        </li>
        <li>
          <details class="dropdown" id="section-guide">
            <summary class="cursor-pointer flex items-center gap-2 font-bold" data-section="guide">
              <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Guide
            </summary>
            <ul class="menu menu-compact pl-4">
              <li><a href="#settings">Settings & Timezone</a></li>
              <li><a href="#performance">Performance Monitoring</a></li>
              <li><a href="#security">Security Analysis</a></li>
              <li><a href="#logs-search">Logs Search</a></li>
              <li><a href="#alerting">Alerting</a></li>
            </ul>
          </details>
        </li>
        <li>
          <details class="dropdown" id="section-faqs">
            <summary class="cursor-pointer flex items-center gap-2 font-bold" data-section="faqs">
              <svg class="w-4 h-4 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Support
            </summary>
            <ul class="menu menu-compact pl-4">
              <li><a href="#compliance">Compliance & Privacy</a></li>
              <li><a href="#contact">Contact Us</a></li>
            </ul>
          </details>
        </li>
      </ul>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 p-4 sm:p-8 lg:ml-64 overflow-x-hidden">
      <div class="max-w-[90vw] sm:max-w-3xl mx-auto break-words" id="main-content">
        
        <!-- Overview Section -->
        <section id="overview" class="mb-16 scroll-mt-32">
          <h1 class="text-3xl font-bold text-base-content mb-4 group">
            <a href="#overview" class="hover:opacity-70">
              OpsBloc Documentation
              <svg class="inline-block w-5 h-5 ml-2 opacity-0 group-hover:opacity-50 transition-opacity" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
              </svg>
            </a>
          </h1>
          <p class="text-base-content/70 mb-4">
            OpsBloc is a lightweight log forwarding and monitoring service that provides real-time insights into your application's performance and security. Send your application logs to OpsBloc and gain immediate visibility into request patterns, security threats, and performance bottlenecks.
          </p>
          
          <h2 class="text-2xl font-semibold text-base-content mb-3 mt-6">What OpsBloc Does</h2>
          <div class="space-y-3 text-base-content/70">
            <p><strong class="text-base-content">Log Collection:</strong> Forward HTTP request logs from your application through a simple REST API.</p>
            <p><strong class="text-base-content">Performance Monitoring:</strong> Track response times, identify slow endpoints, and monitor request patterns in real-time.</p>
            <p><strong class="text-base-content">Security Analysis:</strong> Detect suspicious patterns including SQL injection attempts, XSS attacks, path traversal, command injection, and unusual traffic spikes.</p>
            <p><strong class="text-base-content">Log Search:</strong> Quickly investigate performance or security issues with powerful search and filtering capabilities.</p>
            <p><strong class="text-base-content">Real-time Alerting:</strong> Configure metric thresholds and receive notifications via webhooks or email when anomalies occur.</p>
          </div>
        </section>

        <div class="divider mb-16"></div>

        <!-- Getting Started -->
        <section class="mb-16">
          <h2 class="text-2xl font-bold text-base-content mb-4" id="getting-started">Getting Started</h2>

          <!-- Installation Methods -->
          <div id="installation" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3 group">
              <a href="#installation" class="hover:opacity-70">
                Installation Methods
                <svg class="inline-block w-4 h-4 ml-2 opacity-0 group-hover:opacity-50 transition-opacity" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                </svg>
              </a>
            </h3>
            <p class="text-base-content/70 mb-4">
              You can send web logs to OpsBloc from three different levels of your stack: the web server, your programming language runtime, or your web framework. Each approach has its advantages, and you're welcome to choose what works best for your setup.
            </p>
            
            <div class="space-y-4 mb-6">
              <div class="bg-base-200 p-4 rounded-lg">
                <h4 class="font-semibold text-base-content mb-2">ðŸ’» Language Runtime Level (JavaScript, Python, PHP, Ruby, etc.)</h4>
                <p class="text-base-content/70 text-sm mb-2">
                  <strong>Pros:</strong> Portable across frameworks, good balance of control and simplicity, access to runtime-specific data.
                </p>
                <p class="text-base-content/70 text-sm">
                  <strong>Cons:</strong> Requires code changes in your application, needs to be implemented carefully to avoid blocking requests.
                </p>
              </div>

              <div class="bg-base-200 p-4 rounded-lg">
                <h4 class="font-semibold text-base-content mb-2">ðŸ”§ Web Server Level (NGINX, Apache)</h4>
                <p class="text-base-content/70 text-sm mb-2">
                  <strong>Pros:</strong> Captures all requests regardless of application code, easy to set up once, minimal performance impact, works across all apps on the server.
                </p>
                <p class="text-base-content/70 text-sm">
                  <strong>Cons:</strong> Less visibility into application-specific data like user IDs or custom metrics, requires server-level access.
                </p>
              </div>

              <div class="bg-base-200 p-4 rounded-lg">
                <h4 class="font-semibold text-base-content mb-2">ðŸš€ Framework Level (Express, Django, Laravel, Rails, etc.)</h4>
                <p class="text-base-content/70 text-sm mb-2">
                  <strong>Pros:</strong> Deep integration with your application, easy access to user sessions, custom context, and business logic, framework-specific optimizations.
                </p>
                <p class="text-base-content/70 text-sm">
                  <strong>Cons:</strong> Framework-specific implementation, might need updates when upgrading frameworks.
                </p>
              </div>
            </div>

            <p class="text-base-content/70 text-sm italic">
              <strong>Note:</strong> We've done our best to test these integrations, but every production environment is unique. If you discover better implementations or notice any issues, we'd really appreciate your feedback! Feel free to reach out â€“ we're always looking to improve.
            </p>
          </div>
        </section>

        <div class="divider mb-16"></div>

        <!-- Language Runtimes -->
        <section class="mb-16">
          <h2 class="text-2xl font-bold text-base-content mb-4" id="language-runtimes">Language Runtimes</h2>
          <p class="text-base-content/70 mb-12">
            To start sending logs to OpsBloc, you'll need an <code class="px-2 py-1 bg-base-300 rounded text-sm">APP_ID</code> and <code class="px-2 py-1 bg-base-300 rounded text-sm">APP_TOKEN</code> from your OpsBloc dashboard. The following examples demonstrate how to forward logs from various languages.
          </p>

          <!-- cURL -->
          <div id="curl" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3 group">
              <a href="#curl" class="hover:opacity-70">
                cURL
                <svg class="inline-block w-4 h-4 ml-2 opacity-0 group-hover:opacity-50 transition-opacity" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                </svg>
              </a>
            </h3>
            <p class="text-base-content/70 mb-4">
              The simplest way to test log forwarding is using cURL. This example sends a single log entry to OpsBloc:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  curl -X POST "https://opsbloc.com/logs/APP_ID" \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer APP_TOKEN" \
                    -d '{
                      "timestamp": "'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'",
                      "request_method": "POST",
                      "request_url": "/api/login",
                      "status": 200,
                      "client_ip": "192.168.1.100",
                      "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                      "request_time": 0.125,
                      "request_body": "{\"email\":\"admin'\'OR 1=1--\"}",
                      "referer": "https://example.com/login",
                      "request_id": "uuid-1234",
                      "user": "user123"
                    }'
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- JavaScript -->
          <div id="javascript" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">JavaScript</h3>
            <p class="text-base-content/70 mb-4">
              In vanilla JavaScript, use the Fetch API to send logs asynchronously without blocking your application:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  async function sendLog(logData) {
                    try {
                      await fetch('https://opsbloc.com/logs/APP_ID', {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json',
                          'Authorization': 'Bearer APP_TOKEN'
                        },
                        body: JSON.stringify({
                          timestamp: new Date().toISOString(),
                          request_method: logData.method,
                          request_url: logData.url,
                          status: logData.status,
                          client_ip: logData.ip,
                          user_agent: navigator.userAgent,
                          request_time: logData.responseTime,
                          request_body: logData.body,
                          referer: document.referrer,
                          request_id: logData.requestId,
                          user: logData.userId
                        })
                      });
                    } catch (error) {
                      console.error('Failed to send log:', error);
                    }
                  }

                  // Usage
                  sendLog({
                    method: 'POST',
                    url: '/api/login',
                    status: 200,
                    ip: '192.168.1.100',
                    responseTime: 0.125,
                    body: '{"email":"user@example.com"}',
                    requestId: 'uuid-1234',
                    userId: 'user123'
                  });
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Python -->
          <div id="python" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Python</h3>
            <p class="text-base-content/70 mb-4">
              Using Python's <code class="px-2 py-1 bg-base-300 rounded text-sm">requests</code> library, send logs with proper error handling:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  import requests
                  from datetime import datetime

                  def send_log(log_data):
                      url = "https://opsbloc.com/logs/APP_ID"
                      headers = {
                          "Content-Type": "application/json",
                          "Authorization": "Bearer APP_TOKEN"
                      }
                      payload = {
                          "timestamp": datetime.utcnow().isoformat() + "Z",
                          "request_method": log_data["method"],
                          "request_url": log_data["url"],
                          "status": log_data["status"],
                          "client_ip": log_data["ip"],
                          "user_agent": log_data["user_agent"],
                          "request_time": log_data["response_time"],
                          "request_body": log_data.get("body", ""),
                          "referer": log_data.get("referer", ""),
                          "request_id": log_data.get("request_id", ""),
                          "user": log_data.get("user", "")
                      }
                      
                      try:
                          requests.post(url, json=payload, headers=headers, timeout=5)
                      except requests.exceptions.RequestException as e:
                          print(f"Failed to send log: {e}")

                  # Usage
                  send_log({
                      "method": "POST",
                      "url": "/api/login",
                      "status": 200,
                      "ip": "192.168.1.100",
                      "user_agent": "Mozilla/5.0",
                      "response_time": 0.125,
                      "body": '{"email":"user@example.com"}',
                      "request_id": "uuid-1234",
                      "user": "user123"
                  })
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- PHP -->
          <div id="php" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">PHP</h3>
            <p class="text-base-content/70 mb-4">
              In PHP, use cURL to send logs with minimal overhead:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  function sendLog($logData) {
                      $url = "https://opsbloc.com/logs/APP_ID";
                      $headers = [
                          "Content-Type: application/json",
                          "Authorization: Bearer APP_TOKEN"
                      ];
                      
                      $payload = json_encode([
                          "timestamp" => gmdate('Y-m-d\TH:i:s\Z'),
                          "request_method" => $logData["method"],
                          "request_url" => $logData["url"],
                          "status" => $logData["status"],
                          "client_ip" => $logData["ip"],
                          "user_agent" => $logData["user_agent"],
                          "request_time" => $logData["response_time"],
                          "request_body" => $logData["body"] ?? "",
                          "referer" => $logData["referer"] ?? "",
                          "request_id" => $logData["request_id"] ?? "",
                          "user" => $logData["user"] ?? ""
                      ]);
                      
                      $ch = curl_init($url);
                      curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
                      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                      curl_setopt($ch, CURLOPT_TIMEOUT, 5);
                      
                      $result = curl_exec($ch);
                      if (curl_errno($ch)) {
                          error_log("Failed to send log: " . curl_error($ch));
                      }
                      curl_close($ch);
                  }

                  // Usage
                  sendLog([
                      "method" => "POST",
                      "url" => "/api/login",
                      "status" => 200,
                      "ip" => $_SERVER['REMOTE_ADDR'],
                      "user_agent" => $_SERVER['HTTP_USER_AGENT'],
                      "response_time" => 0.125,
                      "body" => file_get_contents('php://input'),
                      "request_id" => uniqid(),
                      "user" => "user123"
                  ]);
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Ruby -->
          <div id="ruby" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Ruby</h3>
            <p class="text-base-content/70 mb-4">
              Use Ruby's <code class="px-2 py-1 bg-base-300 rounded text-sm">net/http</code> library to forward logs:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  require 'net/http'
                  require 'json'
                  require 'uri'

                  def send_log(log_data)
                    uri = URI('https://opsbloc.com/logs/APP_ID')
                    http = Net::HTTP.new(uri.host, uri.port)
                    http.open_timeout = 5
                    http.read_timeout = 5
                    
                    request = Net::HTTP::Post.new(uri.path)
                    request['Content-Type'] = 'application/json'
                    request['Authorization'] = 'Bearer APP_TOKEN'
                    request.body = {
                      timestamp: Time.now.utc.iso8601,
                      request_method: log_data[:method],
                      request_url: log_data[:url],
                      status: log_data[:status],
                      client_ip: log_data[:ip],
                      user_agent: log_data[:user_agent],
                      request_time: log_data[:response_time],
                      request_body: log_data[:body] || '',
                      referer: log_data[:referer] || '',
                      request_id: log_data[:request_id] || '',
                      user: log_data[:user] || ''
                    }.to_json
                    
                    begin
                      http.request(request)
                    rescue StandardError => e
                      warn "Failed to send log: #{e.message}"
                    end
                  end

                  # Usage
                  send_log({
                    method: 'POST',
                    url: '/api/login',
                    status: 200,
                    ip: '192.168.1.100',
                    user_agent: 'Mozilla/5.0',
                    response_time: 0.125,
                    body: '{"email":"user@example.com"}',
                    request_id: SecureRandom.uuid,
                    user: 'user123'
                  })
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Java -->
          <div id="java" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Java</h3>
            <p class="text-base-content/70 mb-4">
              Using Java's <code class="px-2 py-1 bg-base-300 rounded text-sm">HttpClient</code> (Java 11+), send logs asynchronously:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  import java.net.http.*;
                  import java.net.URI;
                  import java.time.Instant;
                  import org.json.JSONObject;

                  public class OpsBlocLogger {
                      private static final HttpClient client = HttpClient.newHttpClient();
                      private static final String APP_ID = "APP_ID";
                      private static final String APP_TOKEN = "APP_TOKEN";
                      
                      public static void sendLog(LogData logData) {
                          JSONObject payload = new JSONObject();
                          payload.put("timestamp", Instant.now().toString());
                          payload.put("request_method", logData.method);
                          payload.put("request_url", logData.url);
                          payload.put("status", logData.status);
                          payload.put("client_ip", logData.ip);
                          payload.put("user_agent", logData.userAgent);
                          payload.put("request_time", logData.responseTime);
                          payload.put("request_body", logData.body);
                          payload.put("referer", logData.referer);
                          payload.put("request_id", logData.requestId);
                          payload.put("user", logData.user);
                          
                          HttpRequest request = HttpRequest.newBuilder()
                              .uri(URI.create("https://opsbloc.com/logs/" + APP_ID))
                              .header("Content-Type", "application/json")
                              .header("Authorization", "Bearer " + APP_TOKEN)
                              .POST(HttpRequest.BodyPublishers.ofString(payload.toString()))
                              .timeout(java.time.Duration.ofSeconds(5))
                              .build();
                          
                          client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                              .exceptionally(e -> {
                                  System.err.println("Failed to send log: " + e.getMessage());
                                  return null;
                              });
                      }
                  }
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Go -->
          <div id="go" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Go</h3>
            <p class="text-base-content/70 mb-4">
              In Go, use the standard <code class="px-2 py-1 bg-base-300 rounded text-sm">net/http</code> package with a timeout context:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  package main

                  import (
                      "bytes"
                      "context"
                      "encoding/json"
                      "net/http"
                      "time"
                  )

                  type LogData struct {
                      Timestamp     string  `json:"timestamp"`
                      RequestMethod string  `json:"request_method"`
                      RequestURL    string  `json:"request_url"`
                      Status        int     `json:"status"`
                      ClientIP      string  `json:"client_ip"`
                      UserAgent     string  `json:"user_agent"`
                      RequestTime   float64 `json:"request_time"`
                      RequestBody   string  `json:"request_body,omitempty"`
                      Referer       string  `json:"referer,omitempty"`
                      RequestID     string  `json:"request_id,omitempty"`
                      User          string  `json:"user,omitempty"`
                  }

                  func sendLog(logData LogData) error {
                      logData.Timestamp = time.Now().UTC().Format(time.RFC3339)
                      
                      payload, _ := json.Marshal(logData)
                      ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
                      defer cancel()
                      
                      req, _ := http.NewRequestWithContext(ctx, "POST",
                          "https://opsbloc.com/logs/APP_ID", bytes.NewBuffer(payload))
                      req.Header.Set("Content-Type", "application/json")
                      req.Header.Set("Authorization", "Bearer APP_TOKEN")
                      
                      client := &http.Client{}
                      resp, err := client.Do(req)
                      if err != nil {
                          return err
                      }
                      defer resp.Body.Close()
                      return nil
                  }
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Elixir -->
          <div id="elixir" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Elixir</h3>
            <p class="text-base-content/70 mb-4">
              Using Elixir's <code class="px-2 py-1 bg-base-300 rounded text-sm">HTTPoison</code> library, send logs asynchronously:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  defmodule OpsBlocLogger do
                    @app_id "APP_ID"
                    @app_token "APP_TOKEN"
                    @base_url "https://opsbloc.com/logs"

                    def send_log(log_data) do
                      url = "#{@base_url}/#{@app_id}"
                      headers = [
                        {"Content-Type", "application/json"},
                        {"Authorization", "Bearer #{@app_token}"}
                      ]
                      
                      payload = %{
                        timestamp: DateTime.utc_now() |> DateTime.to_iso8601(),
                        request_method: log_data.method,
                        request_url: log_data.url,
                        status: log_data.status,
                        client_ip: log_data.ip,
                        user_agent: log_data.user_agent,
                        request_time: log_data.response_time,
                        request_body: log_data[:body] || "",
                        referer: log_data[:referer] || "",
                        request_id: log_data[:request_id] || "",
                        user: log_data[:user] || ""
                      }
                      
                      case HTTPoison.post(url, Jason.encode!(payload), headers, recv_timeout: 5000) do
                        {:ok, _response} -> :ok
                        {:error, reason} -> 
                          IO.puts("Failed to send log: #{inspect(reason)}")
                          :error
                      end
                    end
                  end
                """ %>
              </code></pre>
            </div>
          </div>
        </section>

        <div class="divider mb-16"></div>
 
        <!-- Web Servers -->
        <section class="mb-16">
          <h2 class="text-2xl font-bold text-base-content mb-4" id="web-servers">Web Servers</h2>
          <p class="text-base-content/70 mb-12">
            Configure your web server to forward logs to OpsBloc without impacting request performance. Both NGINX and Apache implementations use asynchronous logging to ensure your application responses remain fast.
          </p>

          <!-- NGINX -->
          <div id="nginx" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">NGINX</h3>
            <p class="text-base-content/70 mb-4">
              Configure NGINX to send logs to OpsBloc asynchronously without blocking request processing. This method uses the <code class="px-2 py-1 bg-base-300 rounded text-sm">post_action</code> directive to forward logs after the response is sent to the client.
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  # /etc/nginx/nginx.conf or your site config

                  http {
                      # Define log format with all necessary fields
                      log_format opsbloc_json escape=json '{'
                          '"timestamp":"$time_iso8601",'
                          '"request_method":"$request_method",'
                          '"request_url":"$request_uri",'
                          '"status":$status,'
                          '"client_ip":"$remote_addr",'
                          '"user_agent":"$http_user_agent",'
                          '"request_time":$request_time,'
                          '"referer":"$http_referer",'
                          '"request_id":"$request_id"'
                      '}';

                      server {
                          listen 80;
                          server_name yourdomain.com;

                          location / {
                              # Your normal configuration
                              proxy_pass http://your_backend;
                              
                              # Send log to OpsBloc after response (non-blocking)
                              post_action @log_to_opsbloc;
                          }

                          # Internal location for logging
                          location @log_to_opsbloc {
                              internal;
                              
                              proxy_pass https://opsbloc.com/logs/APP_ID;
                              proxy_method POST;
                              proxy_set_header Content-Type application/json;
                              proxy_set_header Authorization "Bearer APP_TOKEN";
                              proxy_set_body $opsbloc_json_log;
                              
                              # Don't wait for response
                              proxy_ignore_client_abort on;
                              access_log off;
                          }
                      }
                  }
                """ %>
              </code></pre>
            </div>
            <p class="text-base-content/70 text-sm mt-4">
              <strong>Important:</strong> The <code class="px-2 py-1 bg-base-300 rounded text-sm">post_action</code> runs after the response is sent to the client, ensuring zero impact on response times. Replace <code class="px-2 py-1 bg-base-300 rounded text-sm">APP_ID</code> and <code class="px-2 py-1 bg-base-300 rounded text-sm">APP_TOKEN</code> with your actual credentials.
            </p>

            <div class="mt-4">
              <p class="text-base-content/70 text-sm">
                <strong>Advanced:</strong> If you need to capture request bodies or have OpenResty/lua-nginx-module installed, you can use <code class="px-2 py-1 bg-base-300 rounded text-sm">log_by_lua_block</code> for more flexibility. This requires additional setup but provides deeper integration. Contact us for Lua-based examples.
              </p>
            </div>
          </div>

          <!-- Apache -->
          <div id="apache" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Apache</h3>
            <p class="text-base-content/70 mb-4">
              Configure Apache to send logs to OpsBloc using a custom log format and a simple script that processes logs asynchronously in the background.
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  # Apache configuration
                  # /etc/apache2/sites-available/yourdomain.conf

                  <VirtualHost *:80>
                      ServerName yourdomain.com

                      # Define custom log format for OpsBloc
                      LogFormat "{ \
                        \"timestamp\":\"%{%Y-%m-%dT%H:%M:%S}t%{%z}t\", \
                        \"request_method\":\"%m\", \
                        \"request_url\":\"%U%q\", \
                        \"status\":REPLACE_WITH_GT_s, \
                        \"client_ip\":\"%a\", \
                        \"user_agent\":\"%{User-agent}i\", \
                        \"request_time\":%D, \
                        \"referer\":\"%{Referer}i\", \
                        \"request_id\":\"%{UNIQUE_ID}e\" \
                      }" opsbloc_json

                      # Pipe logs to a script that sends them asynchronously
                      CustomLog "|$/usr/local/bin/opsbloc_logger.sh" opsbloc_json

                      # Your normal configuration
                      DocumentRoot /var/www/html
                  </VirtualHost>
                """ %>
              </code></pre>
            </div>

            <p class="text-base-content/70 mb-3 mt-4">
              Use <code class="px-2 py-1 bg-base-300 rounded text-sm">%>s</code> instead of <code class="px-2 py-1 bg-base-300 rounded text-sm">REPLACE_WITH_GT_s</code>
            </p>

            <p class="text-base-content/70 mb-3 mt-4">
              Create the async logger script at <code class="px-2 py-1 bg-base-300 rounded text-sm">/usr/local/bin/opsbloc_logger.sh</code>:
            </p>
            
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  #!/bin/bash
                  # /usr/local/bin/opsbloc_logger.sh

                  APP_ID="YOUR_APP_ID"
                  APP_TOKEN="YOUR_APP_TOKEN"

                  while read line; do
                      # Send to OpsBloc in background (non-blocking)
                      (
                          curl -X POST "https://opsbloc.com/logs/$APP_ID" \
                              -H "Content-Type: application/json" \
                              -H "Authorization: Bearer $APP_TOKEN" \
                              -d "$line" \
                              --max-time 5 \
                              --silent \
                              --show-error \
                              > /dev/null 2>&1
                      ) &
                  done
                """ %>
              </code></pre>
            </div>
            
            <p class="text-base-content/70 text-sm mt-4">
              Make the script executable: <code class="px-2 py-1 bg-base-300 rounded text-sm">chmod +x /usr/local/bin/opsbloc_logger.sh</code>. The script runs each curl request in the background, ensuring Apache doesn't wait for OpsBloc responses.
            </p>

            <div class="mt-4">
              <p class="text-base-content/70 text-sm">
                <strong>Advanced:</strong> If you have mod_lua enabled and need request body capture, a Lua-based solution using <code class="px-2 py-1 bg-base-300 rounded text-sm">LuaHookLog</code> can provide better performance. Contact us for Lua-based examples.
              </p>
            </div>
          </div>
        </section>

        <div class="divider mb-16"></div>

        <!-- Framework Integration -->
        <section class="mb-16">
          <h2 class="text-2xl font-bold text-base-content mb-4" id="framework-integration">Framework Integration</h2>
          <p class="text-base-content/70 mb-12">
            These framework integrations are designed to minimize performance impact, handle OpsBloc downtime gracefully, and automatically capture request metadata. All implementations use asynchronous logging and include error handling to prevent crashes.
          </p>

          <!-- Node.js -->
          <div id="nodejs" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Node.js</h3>
            <p class="text-base-content/70 mb-4">
              Create a non-blocking logger module that queues logs and sends them in the background:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  // opsbloc-logger.js
                  const https = require('https');

                  class OpsBlocLogger {
                    constructor(appId, appToken) {
                      this.appId = appId;
                      this.appToken = appToken;
                      this.queue = [];
                      this.processing = false;
                    }

                    log(req, res, responseTime) {
                      const logData = {
                        timestamp: new Date().toISOString(),
                        request_method: req.method,
                        request_url: req.url,
                        status: res.statusCode,
                        client_ip: req.ip || req.connection.remoteAddress,
                        user_agent: req.headers['user-agent'],
                        request_time: responseTime,
                        request_body: req.body ? JSON.stringify(req.body) : '',
                        referer: req.headers.referer || '',
                        request_id: req.id || '',
                        user: req.user?.id || ''
                      };

                      this.queue.push(logData);
                      if (!this.processing) this.processQueue();
                    }

                    async processQueue() {
                      if (this.queue.length === 0) {
                        this.processing = false;
                        return;
                      }
                      this.processing = true;
                      const log = this.queue.shift();
                      
                      try {
                        await this.sendLog(log);
                      } catch (error) {
                        console.error('OpsBloc logging failed:', error.message);
                      }
                      setImmediate(() => this.processQueue());
                    }

                    sendLog(logData) {
                      return new Promise((resolve, reject) => {
                        const data = JSON.stringify(logData);
                        const options = {
                          hostname: 'localhost',
                          port: 4000,
                          path: `/logs/${this.appId}`,
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${this.appToken}`,
                            'Content-Length': data.length
                          },
                          timeout: 5000
                        };

                        const req = https.request(options, (res) => {
                          res.on('data', () => {});
                          res.on('end', () => resolve());
                        });

                        req.on('error', reject);
                        req.on('timeout', () => {
                          req.destroy();
                          reject(new Error('Request timeout'));
                        });

                        req.write(data);
                        req.end();
                      });
                    }
                  }

                  module.exports = new OpsBlocLogger('APP_ID', 'APP_TOKEN');
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Next.js -->
          <div id="nextjs" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Next.js</h3>
            <p class="text-base-content/70 mb-4">
              Implement a Next.js middleware that logs all requests without blocking responses:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  // middleware.js
                  import { NextResponse } from 'next/server';

                  const APP_ID = 'APP_ID';
                  const APP_TOKEN = 'APP_TOKEN';

                  export async function middleware(request) {
                    const startTime = Date.now();
                    const response = NextResponse.next();
                    
                    // Log asynchronously after response
                    response.waitUntil = (async () => {
                      try {
                        const responseTime = (Date.now() - startTime) / 1000;
                        
                        await fetch(`https://opsbloc.com/logs/${APP_ID}`, {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${APP_TOKEN}`
                          },
                          body: JSON.stringify({
                            timestamp: new Date().toISOString(),
                            request_method: request.method,
                            request_url: request.nextUrl.pathname,
                            status: response.status,
                            client_ip: request.ip || request.headers.get('x-forwarded-for'),
                            user_agent: request.headers.get('user-agent'),
                            request_time: responseTime,
                            referer: request.headers.get('referer'),
                            request_id: crypto.randomUUID()
                          }),
                          signal: AbortSignal.timeout(5000)
                        });
                      } catch (error) {
                        console.error('OpsBloc logging failed:', error);
                      }
                    })();
                    
                    return response;
                  }

                  export const config = {
                    matcher: '/api/:path*'
                  };
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Express -->
          <div id="express" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Express</h3>
            <p class="text-base-content/70 mb-4">
              Create an Express middleware that logs after the response is sent:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  // opsbloc-middleware.js
                  const fetch = require('node-fetch');

                  const APP_ID = 'APP_ID';
                  const APP_TOKEN = 'APP_TOKEN';

                  function opsBlocMiddleware(req, res, next) {
                    const startTime = Date.now();
                    const originalEnd = res.end;
                    
                    res.end = function(...args) {
                      originalEnd.apply(res, args);
                      
                      const responseTime = (Date.now() - startTime) / 1000;
                      fetch(`https://opsbloc.com/logs/${APP_ID}`, {
                        method: 'POST',
                        headers: {
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${APP_TOKEN}`
                        },
                        body: JSON.stringify({
                          timestamp: new Date().toISOString(),
                          request_method: req.method,
                          request_url: req.originalUrl,
                          status: res.statusCode,
                          client_ip: req.ip,
                          user_agent: req.get('user-agent'),
                          request_time: responseTime,
                          request_body: JSON.stringify(req.body || {}),
                          referer: req.get('referer'),
                          request_id: req.id,
                          user: req.user?.id
                        }),
                        timeout: 5000
                      }).catch(error => {
                        console.error('OpsBloc logging failed:', error.message);
                      });
                    };
                    
                    next();
                  }

                  module.exports = opsBlocMiddleware;
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- ASP.NET -->
          <div id="asp" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">ASP.NET</h3>
            <p class="text-base-content/70 mb-4">
              Create an ASP.NET Core middleware that logs asynchronously using background tasks:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  // OpsBlocMiddleware.cs
                  using System.Diagnostics;
                  using System.Text;
                  using System.Text.Json;

                  public class OpsBlocMiddleware
                  {
                      private readonly RequestDelegate _next;
                      private readonly HttpClient _httpClient;
                      private const string AppId = "APP_ID";
                      private const string AppToken = "APP_TOKEN";

                      public OpsBlocMiddleware(RequestDelegate next, IHttpClientFactory httpClientFactory)
                      {
                          _next = next;
                          _httpClient = httpClientFactory.CreateClient();
                          _httpClient.Timeout = TimeSpan.FromSeconds(5);
                      }

                      public async Task InvokeAsync(HttpContext context)
                      {
                          var stopwatch = Stopwatch.StartNew();
                          await _next(context);
                          stopwatch.Stop();
                          
                          _ = Task.Run(async () =>
                          {
                              try
                              {
                                  var logData = new
                                  {
                                      timestamp = DateTime.UtcNow.ToString("o"),
                                      request_method = context.Request.Method,
                                      request_url = context.Request.Path.Value,
                                      status = context.Response.StatusCode,
                                      client_ip = context.Connection.RemoteIpAddress?.ToString(),
                                      user_agent = context.Request.Headers["User-Agent"].ToString(),
                                      request_time = stopwatch.Elapsed.TotalSeconds,
                                      referer = context.Request.Headers["Referer"].ToString(),
                                      request_id = context.TraceIdentifier,
                                      user = context.User?.Identity?.Name
                                  };

                                  var json = JsonSerializer.Serialize(logData);
                                  var content = new StringContent(json, Encoding.UTF8, "application/json");
                                  
                                  var request = new HttpRequestMessage(HttpMethod.Post,
                                      $"https://opsbloc.com/logs/{AppId}");
                                  request.Headers.Add("Authorization", $"Bearer {AppToken}");
                                  request.Content = content;

                                  await _httpClient.SendAsync(request);
                              }
                              catch (Exception ex)
                              {
                                  Console.WriteLine($"OpsBloc logging failed: {ex.Message}");
                              }
                          });
                      }
                  }
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Flask -->
          <div id="flask" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Flask</h3>
            <p class="text-base-content/70 mb-4">
              Use Flask's after_request hook with threading to log without blocking responses:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  from flask import Flask, request, g
                  import requests
                  import threading
                  from datetime import datetime
                  import time

                  app = Flask(__name__)

                  APP_ID = "APP_ID"
                  APP_TOKEN = "APP_TOKEN"

                  @app.before_request
                  def before_request():
                      g.start_time = time.time()

                  @app.after_request
                  def after_request(response):
                      if hasattr(g, 'start_time'):
                          response_time = time.time() - g.start_time
                          thread = threading.Thread(
                              target=send_log_async,
                              args=(request, response, response_time)
                          )
                          thread.daemon = True
                          thread.start()
                      return response

                  def send_log_async(request, response, response_time):
                      try:
                          log_data = {
                              "timestamp": datetime.utcnow().isoformat() + "Z",
                              "request_method": request.method,
                              "request_url": request.path,
                              "status": response.status_code,
                              "client_ip": request.remote_addr,
                              "user_agent": request.headers.get('User-Agent', ''),
                              "request_time": response_time,
                              "request_body": request.get_data(as_text=True),
                              "referer": request.headers.get('Referer', ''),
                              "request_id": request.headers.get('X-Request-ID', ''),
                              "user": getattr(request, 'user_id', '')
                          }
                          
                          requests.post(
                              f"https://opsbloc.com/logs/{APP_ID}",
                              json=log_data,
                              headers={"Authorization": f"Bearer {APP_TOKEN}"},
                              timeout=5
                          )
                      except Exception as e:
                          app.logger.error(f"OpsBloc logging failed: {e}")
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Django -->
          <div id="django" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Django</h3>
            <p class="text-base-content/70 mb-4">
              Create a Django middleware that logs asynchronously using threads:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  # middleware/opsbloc_middleware.py
                  import time
                  import requests
                  import threading
                  from datetime import datetime

                  APP_ID = "APP_ID"
                  APP_TOKEN = "APP_TOKEN"

                  class OpsBlocMiddleware:
                      def __init__(self, get_response):
                          self.get_response = get_response

                      def __call__(self, request):
                          start_time = time.time()
                          response = self.get_response(request)
                          response_time = time.time() - start_time
                          
                          thread = threading.Thread(
                              target=self._send_log,
                              args=(request, response, response_time)
                          )
                          thread.daemon = True
                          thread.start()
                          
                          return response

                      def _send_log(self, request, response, response_time):
                          try:
                              log_data = {
                                  "timestamp": datetime.utcnow().isoformat() + "Z",
                                  "request_method": request.method,
                                  "request_url": request.path,
                                  "status": response.status_code,
                                  "client_ip": self._get_client_ip(request),
                                  "user_agent": request.META.get('HTTP_USER_AGENT', ''),
                                  "request_time": response_time,
                                  "request_body": request.body.decode('utf-8') if request.body else '',
                                  "referer": request.META.get('HTTP_REFERER', ''),
                                  "request_id": request.META.get('HTTP_X_REQUEST_ID', ''),
                                  "user": str(request.user.id) if request.user.is_authenticated else ''
                              }
                              
                              requests.post(
                                  f"https://opsbloc.com/logs/{APP_ID}",
                                  json=log_data,
                                  headers={"Authorization": f"Bearer {APP_TOKEN}"},
                                  timeout=5
                              )
                          except Exception as e:
                              print(f"OpsBloc logging failed: {e}")

                      def _get_client_ip(self, request):
                          x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
                          if x_forwarded_for:
                              return x_forwarded_for.split(',')[0]
                          return request.META.get('REMOTE_ADDR')
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- WordPress -->
          <div id="wordpress" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">WordPress</h3>
            <p class="text-base-content/70 mb-4">
              Add this code to your theme's functions.php or create a custom plugin:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  // functions.php or custom plugin
                  define('OPSBLOC_APP_ID', 'APP_ID');
                  define('OPSBLOC_APP_TOKEN', 'APP_TOKEN');

                  add_action('shutdown', 'opsbloc_log_request');

                  function opsbloc_log_request() {
                      global $wp;
                      
                      $start_time = defined('REQUEST_START_TIME') ? REQUEST_START_TIME : microtime(true);
                      $response_time = microtime(true) - $start_time;
                      
                      $log_data = array(
                          'timestamp' => gmdate('Y-m-d\TH:i:s\Z'),
                          'request_method' => $_SERVER['REQUEST_METHOD'],
                          'request_url' => home_url($wp->request),
                          'status' => http_response_code(),
                          'client_ip' => opsbloc_get_client_ip(),
                          'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? '',
                          'request_time' => $response_time,
                          'request_body' => file_get_contents('php://input'),
                          'referer' => $_SERVER['HTTP_REFERER'] ?? '',
                          'request_id' => uniqid(),
                          'user' => get_current_user_id()
                      );
                      
                      wp_remote_post('https://opsbloc.com/logs/' . OPSBLOC_APP_ID, array(
                          'blocking' => false,
                          'timeout' => 5,
                          'headers' => array(
                              'Content-Type' => 'application/json',
                              'Authorization' => 'Bearer ' . OPSBLOC_APP_TOKEN
                          ),
                          'body' => json_encode($log_data)
                      ));
                  }

                  function opsbloc_get_client_ip() {
                      $ip_keys = array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR');
                      foreach ($ip_keys as $key) {
                          if (isset($_SERVER[$key])) {
                              $ip = explode(',', $_SERVER[$key]);
                              return trim($ip[0]);
                          }
                      }
                      return '';
                  }

                  define('REQUEST_START_TIME', microtime(true));
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- FastAPI -->
          <div id="fastapi" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">FastAPI</h3>
            <p class="text-base-content/70 mb-4">
              Use FastAPI's middleware with background tasks for non-blocking logging:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  from fastapi import FastAPI, Request
                  import httpx
                  import time
                  from datetime import datetime

                  app = FastAPI()

                  APP_ID = "APP_ID"
                  APP_TOKEN = "APP_TOKEN"

                  @app.middleware("http")
                  async def opsbloc_middleware(request: Request, call_next):
                      start_time = time.time()
                      response = await call_next(request)
                      response_time = time.time() - start_time
                      
                      async def send_log():
                          try:
                              log_data = {
                                  "timestamp": datetime.utcnow().isoformat() + "Z",
                                  "request_method": request.method,
                                  "request_url": str(request.url.path),
                                  "status": response.status_code,
                                  "client_ip": request.client.host,
                                  "user_agent": request.headers.get("user-agent", ""),
                                  "request_time": response_time,
                                  "referer": request.headers.get("referer", ""),
                                  "request_id": request.headers.get("x-request-id", ""),
                                  "user": getattr(request.state, "user_id", "")
                              }
                              
                              async with httpx.AsyncClient(timeout=5.0) as client:
                                  await client.post(
                                      f"https://opsbloc.com/logs/{APP_ID}",
                                      json=log_data,
                                      headers={"Authorization": f"Bearer {APP_TOKEN}"}
                                  )
                          except Exception as e:
                              print(f"OpsBloc logging failed: {e}")
                      
                      import asyncio
                      asyncio.create_task(send_log())
                      
                      return response
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Laravel -->
          <div id="laravel" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Laravel</h3>
            <p class="text-base-content/70 mb-4">
              Create a Laravel middleware that logs after the response using queued jobs:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  // app/Http/Middleware/OpsBlocMiddleware.php
                  namespace App\Http\Middleware;

                  use Closure;
                  use Illuminate\Support\Facades\Http;
                  use Illuminate\Http\Request;

                  class OpsBlocMiddleware
                  {
                      public function handle(Request $request, Closure $next)
                      {
                          $startTime = microtime(true);
                          $response = $next($request);
                          $responseTime = microtime(true) - $startTime;
                          
                          app()->terminating(function () use ($request, $response, $responseTime) {
                              $this->sendLog($request, $response, $responseTime);
                          });
                          
                          return $response;
                      }

                      private function sendLog($request, $response, $responseTime)
                      {
                          try {
                              $logData = [
                                  'timestamp' => now()->toIso8601String(),
                                  'request_method' => $request->method(),
                                  'request_url' => $request->path(),
                                  'status' => $response->status(),
                                  'client_ip' => $request->ip(),
                                  'user_agent' => $request->userAgent(),
                                  'request_time' => $responseTime,
                                  'request_body' => $request->getContent(),
                                  'referer' => $request->header('referer', ''),
                                  'request_id' => $request->header('x-request-id', ''),
                                  'user' => optional($request->user())->id ?? ''
                              ];

                              Http::timeout(5)
                                  ->withHeaders([
                                      'Authorization' => 'Bearer ' . config('opsbloc.app_token')
                                  ])
                                  ->post(
                                      'https://opsbloc.com/logs/' . config('opsbloc.app_id'),
                                      $logData
                                  );
                          } catch (\Exception $e) {
                              \Log::error('OpsBloc logging failed: ' . $e->getMessage());
                          }
                      }
                  }
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Rails -->
          <div id="rails" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Rails</h3>
            <p class="text-base-content/70 mb-4">
              Create a Rails middleware that logs asynchronously using ActiveJob:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  # lib/middleware/ops_bloc_middleware.rb
                  require 'net/http'
                  require 'json'

                  class OpsBlocMiddleware
                    APP_ID = ENV['OPSBLOC_APP_ID'] || 'APP_ID'
                    APP_TOKEN = ENV['OPSBLOC_APP_TOKEN'] || 'APP_TOKEN'

                    def initialize(app)
                      @app = app
                    end

                    def call(env)
                      start_time = Time.now
                      status, headers, response = @app.call(env)
                      response_time = Time.now - start_time

                      Thread.new do
                        begin
                          send_log(env, status, response_time)
                        rescue StandardError => e
                          Rails.logger.error "OpsBloc logging failed: #{e.message}"
                        end
                      end

                      [status, headers, response]
                    end

                    private

                    def send_log(env, status, response_time)
                      request = ActionDispatch::Request.new(env)
                      
                      log_data = {
                        timestamp: Time.now.utc.iso8601,
                        request_method: request.request_method,
                        request_url: request.fullpath,
                        status: status,
                        client_ip: request.remote_ip,
                        user_agent: request.user_agent,
                        request_time: response_time,
                        request_body: request.body.read,
                        referer: request.referer || '',
                        request_id: request.request_id,
                        user: request.env['warden']&.user&.id || ''
                      }

                      uri = URI("https://opsbloc.com/logs/#{APP_ID}")
                      http = Net::HTTP.new(uri.host, uri.port)
                      http.open_timeout = 5
                      http.read_timeout = 5

                      req = Net::HTTP::Post.new(uri.path)
                      req['Content-Type'] = 'application/json'
                      req['Authorization'] = "Bearer #{APP_TOKEN}"
                      req.body = log_data.to_json

                      http.request(req)
                    end
                  end
                """ %>
              </code></pre>
            </div>
          </div>

          <!-- Symfony -->
          <div id="symfony" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Symfony</h3>
            <p class="text-base-content/70 mb-4">
              Create a Symfony event subscriber that logs after the response is sent:
            </p>
            <div class="mockup-code bg-gray-800 shadow-lg max-w-[90vw] sm:max-w-2xl mx-auto text-left font-mono text-sm whitespace-normal">
              <pre><code class="text-gray-300">
                <%= ~S"""
                  // src/EventSubscriber/OpsBlocSubscriber.php
                  namespace App\EventSubscriber;

                  use Symfony\Component\EventDispatcher\EventSubscriberInterface;
                  use Symfony\Component\HttpKernel\Event\RequestEvent;
                  use Symfony\Component\HttpKernel\Event\TerminateEvent;
                  use Symfony\Component\HttpKernel\KernelEvents;
                  use Symfony\Contracts\HttpClient\HttpClientInterface;

                  class OpsBlocSubscriber implements EventSubscriberInterface
                  {
                      private $httpClient;
                      private $startTime;
                      private const APP_ID = 'APP_ID';
                      private const APP_TOKEN = 'APP_TOKEN';

                      public function __construct(HttpClientInterface $httpClient)
                      {
                          $this->httpClient = $httpClient;
                      }

                      public static function getSubscribedEvents()
                      {
                          return [
                              KernelEvents::REQUEST => 'onKernelRequest',
                              KernelEvents::TERMINATE => 'onKernelTerminate',
                          ];
                      }

                      public function onKernelRequest(RequestEvent $event)
                      {
                          if (!$event->isMainRequest()) {
                              return;
                          }
                          $this->startTime = microtime(true);
                      }

                      public function onKernelTerminate(TerminateEvent $event)
                      {
                          if (!$event->isMainRequest()) {
                              return;
                          }

                          $responseTime = microtime(true) - $this->startTime;
                          $request = $event->getRequest();
                          $response = $event->getResponse();

                          try {
                              $logData = [
                                  'timestamp' => (new \DateTime())->format(\DateTime::ATOM),
                                  'request_method' => $request->getMethod(),
                                  'request_url' => $request->getPathInfo(),
                                  'status' => $response->getStatusCode(),
                                  'client_ip' => $request->getClientIp(),
                                  'user_agent' => $request->headers->get('User-Agent'),
                                  'request_time' => $responseTime,
                                  'request_body' => $request->getContent(),
                                  'referer' => $request->headers->get('referer', ''),
                                  'request_id' => $request->headers->get('X-Request-ID', ''),
                                  'user' => $request->getUser() ?? ''
                              ];

                              $this->httpClient->request('POST',
                                  'https://opsbloc.com/logs/' . self::APP_ID, [
                                  'json' => $logData,
                                  'headers' => [
                                      'Authorization' => 'Bearer ' . self::APP_TOKEN
                                  ],
                                  'timeout' => 5
                              ]);
                          } catch (\Exception $e) {
                              // Silently fail
                          }
                      }
                  }
                """ %>
              </code></pre>
            </div>
          </div>
        </section>

        <div class="divider mb-16"></div>

        <!-- Guide Section -->
        <section class="mb-16">
          <h2 class="text-2xl font-bold text-base-content mb-4" id="guide">Guide</h2>

          <!-- Settings & Timezone -->
          <div id="settings" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Settings & Timezone</h3>
            <p class="text-base-content/70 mb-4">
              Configure your application settings and timezone preferences in the OpsBloc dashboard. All timestamps in logs are stored in UTC and automatically converted to your selected timezone for display.
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2">
              <li><strong class="text-base-content">Application Settings:</strong> Manage your APP_ID and regenerate APP_TOKEN from the settings page</li>
              <li><strong class="text-base-content">Timezone Configuration:</strong> Select your preferred timezone for log visualization and reports</li>
            </ul>
          </div>

          <!-- Performance -->
          <div id="performance" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Performance Monitoring</h3>
            <p class="text-base-content/70 mb-4">
              OpsBloc automatically analyzes request times and provides insights into your application's performance:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2">
              <li><strong class="text-base-content">Response Time Tracking:</strong> View average, apdex, and 95th percentile response times</li>
              <li><strong class="text-base-content">Slow Endpoint Detection:</strong> Identify endpoints that consistently perform poorly</li>
              <li><strong class="text-base-content">Request Volume Analysis:</strong> Monitor request patterns and traffic spikes</li>
              <li><strong class="text-base-content">Performance Trends:</strong> View historical performance data to identify degradation over time</li>
              <li><strong class="text-base-content">Status Code Distribution:</strong> Track error rates and success ratios</li>
            </ul>
          </div>

          <!-- Security -->
          <div id="security" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Security Analysis</h3>
            <p class="text-base-content/70 mb-4">
              OpsBloc monitors your logs for suspicious patterns and potential security threats:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2">
              <li><strong class="text-base-content">SQL Injection Detection:</strong> Identifies common SQL injection patterns in request bodies and URLs</li>
              <li><strong class="text-base-content">XSS Attack Monitoring:</strong> Detects cross-site scripting attempts</li>
              <li><strong class="text-base-content">Rate Limiting Violations:</strong> Identifies IPs making excessive requests</li>
              <li><strong class="text-base-content">Path Traversal Detection:</strong> Identifies attempts to access files outside intended directories</li>
              <li><strong class="text-base-content">Command Injection Monitoring:</strong> Detects shell command injection attempts in request parameters</li>
              <li><strong class="text-base-content">Authentication Failures:</strong> Tracks failed login attempts and potential brute force attacks</li>
              <li><strong class="text-base-content">Suspicious User Agents:</strong> Identifies known malicious bots and scanners</li>
            </ul>
          </div>

          <!-- Logs Search -->
          <div id="logs-search" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Logs Search</h3>
            <p class="text-base-content/70 mb-4">
              Quickly find specific logs using powerful search and filtering capabilities:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2">
              <li><strong class="text-base-content">Full-text Search:</strong> Search across all log fields including URLs, IPs, and user agents</li>
              <li><strong class="text-base-content">Advanced Filters:</strong> Filter by status code, HTTP method, date range, and response time</li>
              <li><strong class="text-base-content">IP Address Search:</strong> Find all requests from a specific IP or IP range</li>
              <li><strong class="text-base-content">User Tracking:</strong> View all activity for a specific user ID</li>
              <li><strong class="text-base-content">Request ID Lookup:</strong> Trace individual requests through your system</li>
            </ul>
          </div>

          <!-- Alerting -->
          <div id="alerting" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-3">Alerting</h3>
            <p class="text-base-content/70 mb-4">
              Configure real-time alerts to be notified when specific conditions are met:
            </p>
            
            <h4 class="text-lg font-semibold text-base-content mb-3 mt-6">Alert Channels</h4>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2 mb-6">
              <li><strong class="text-base-content">Email Notifications:</strong> Receive alerts directly in your inbox</li>
              <li><strong class="text-base-content">Webhooks:</strong> POST alert data to your own endpoints for custom integrations</li>
            </ul>

            <h4 class="text-lg font-semibold text-base-content mb-3 mt-6">Metric Thresholds</h4>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2">
              <li><strong class="text-base-content">Error Rate:</strong> Alert when 4xx or 5xx responses exceed a threshold (e.g., >5% error rate)</li>
              <li><strong class="text-base-content">Response Time:</strong> Notify when average response time exceeds configured limit (e.g., >2 seconds)</li>
              <li><strong class="text-base-content">Request Volume:</strong> Alert on traffic spikes or unusual request patterns</li>
              <li><strong class="text-base-content">Security Events:</strong> Immediate notification when potential attacks are detected</li>
              <li><strong class="text-base-content">Alert Rules:</strong> Select alert rules using multiple metrics and set your thresholds</li>
            </ul>

            <p class="text-base-content/70 mt-6">
              Alerts are sent immediately when thresholds are breached and include relevant context to help you investigate the issue quickly.
            </p>
          </div>
        </section>

        <div class="divider mb-16"></div>

        <!-- Support Section -->
        <section class="mb-16">
          <h2 class="text-2xl font-bold text-base-content mb-4" id="faqs">Support</h2>

          <!-- Compliance & Privacy -->
          <div id="compliance" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-4">Compliance & Privacy</h3>
            
            <h4 class="text-lg font-semibold text-base-content mb-3 mt-6">What Data Does OpsBloc Collect?</h4>
            <p class="text-base-content/70 mb-4">
              When you forward logs to OpsBloc, we collect the following information to provide monitoring and security insights:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2 mb-6">
              <li><strong class="text-base-content">Request Metadata:</strong> HTTP method, URL path, status code, response time, and timestamp</li>
              <li><strong class="text-base-content">Client Information:</strong> IP address, user agent, and referer</li>
              <li><strong class="text-base-content">Request Body:</strong> POST/PUT request payloads (optional, can be disabled)</li>
              <li><strong class="text-base-content">Custom Fields:</strong> User IDs, request IDs, or any additional metadata you choose to send</li>
            </ul>
            <p class="text-base-content/70 mb-4">
              All data is stored securely with encryption at rest and in transit. You maintain full control over what data you send to OpsBloc through your integration configuration.
            </p>

            <h4 class="text-lg font-semibold text-base-content mb-3 mt-8">GDPR Compliance</h4>
            <p class="text-base-content/70 mb-4">
              OpsBloc is designed to be GDPR compliant. Under GDPR, OpsBloc operates as a Data Processor when handling log data on your behalf. Key compliance features include:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2 mb-6">
              <li><strong class="text-base-content">Data Control:</strong> You decide what personal data to send through your log configuration</li>
              <li><strong class="text-base-content">Data Retention:</strong> Configure automatic log deletion after 7, 30, or 90 days based on your plan</li>
              <li><strong class="text-base-content">Data Export:</strong> Export your logs as CSV at any time</li>
              <li><strong class="text-base-content">Data Deletion:</strong> Delete individual logs or all logs for your application instantly</li>
              <li><strong class="text-base-content">Right to Access:</strong> Full visibility into all data stored through your dashboard</li>
            </ul>
            <p class="text-base-content/70 mb-4">
              To minimize personal data collection, consider:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2 mb-6">
              <li>Omitting the <code class="px-2 py-1 bg-base-300 rounded text-sm">request_body</code> field from your logs</li>
              <li>Using anonymized or hashed user identifiers instead of email addresses</li>
              <li>Filtering sensitive URL parameters before sending logs</li>
            </ul>

            <h4 class="text-lg font-semibold text-base-content mb-3 mt-8">HIPAA Considerations</h4>
            <p class="text-base-content/70 mb-4">
              OpsBloc can be deployed in HIPAA-compliant environments with proper configuration. To ensure Protected Health Information (PHI) is not inadvertently logged:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2 mb-6">
              <li><strong class="text-base-content">Exclude Request Bodies:</strong> Do not send the <code class="px-2 py-1 bg-base-300 rounded text-sm">request_body</code> field if it may contain PHI</li>
              <li><strong class="text-base-content">Sanitize URLs:</strong> Remove patient identifiers, medical record numbers, or other PHI from URL paths before logging</li>
              <li><strong class="text-base-content">Use Generic Identifiers:</strong> Log with anonymized session IDs rather than patient-specific identifiers</li>
              <li><strong class="text-base-content">Review Your Configuration:</strong> Audit your logging implementation to ensure no PHI is being transmitted</li>
            </ul>
            <p class="text-base-content/70 mb-4">
              For questions about deploying OpsBloc in HIPAA-compliant environments, contact our team.
            </p>

            <h4 class="text-lg font-semibold text-base-content mb-3 mt-8">PDPA Compliance</h4>
            <p class="text-base-content/70 mb-4">
              OpsBloc complies with Singapore's Personal Data Protection Act (PDPA) and similar data protection regulations across Asia-Pacific. As a Data Intermediary under PDPA, we provide:
            </p>
            <ul class="list-disc pl-5 text-base-content/70 space-y-2 mb-6">
              <li><strong class="text-base-content">Purpose Limitation:</strong> Log data is used solely for monitoring, security analysis, and performance optimization</li>
              <li><strong class="text-base-content">Consent and Control:</strong> You control what personal data is included in logs through your integration</li>
              <li><strong class="text-base-content">Data Accuracy:</strong> Real-time log data ensures accuracy of monitoring information</li>
              <li><strong class="text-base-content">Protection:</strong> Industry-standard encryption and access controls protect log data</li>
              <li><strong class="text-base-content">Retention Limitation:</strong> Automatic deletion after 30 days</li>
              <li><strong class="text-base-content">Access and Correction:</strong> Full access to view, export, or delete your data at any time</li>
              <li><strong class="text-base-content">Data Breach Notification:</strong> We will notify you promptly of any security incidents affecting your data</li>
            </ul>
            <p class="text-base-content/70 mb-4">
              For PDPA-specific inquiries or to request our Data Protection Policy, please contact our team.
            </p>

            <h4 class="text-lg font-semibold text-base-content mb-3 mt-8">Payment Security</h4>
            <p class="text-base-content/70 mb-4">
              All payment processing is handled by Stripe, a PCI Level 1 certified payment processor. OpsBloc does not store or have access to your credit card information. Stripe's infrastructure has been audited by independent PCI Qualified Security Assessors and maintains the highest level of certification in the payments industry.
            </p>
          </div>

          <!-- Contact Us -->
          <div id="contact" class="mb-12 scroll-mt-30">
            <h3 class="text-xl font-semibold text-base-content mb-4">Contact Us</h3>
            <p class="text-base-content/70 mb-4">
              We're here to help with any questions, feedback, or issues you may encounter. Our team typically responds within 24 hours.
            </p>
            
            <div class="bg-base-200 p-6 rounded-lg mb-6">
              <h4 class="text-lg font-semibold text-base-content mb-3">Get in Touch</h4>
              <p class="text-base-content/70 mb-4">
                For support, feature requests, compliance questions, or general inquiries:
              </p>
              <div class="flex items-center gap-2 text-base-content">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <span class="font-mono">
                  <span data-email-user="team">team</span><!--
                  -->@<!--
                  --><span data-email-domain="opsbloc.com">opsbloc.com</span>
                </span>
              </div>
            </div>
            
            <p class="text-base-content/70 text-sm">
              We value your privacy and will never share your email address with third parties.
            </p>
          </div>
        </section>
      </div>
    </main>
  </div>

  <!-- JavaScript for Sidebar Toggle and Smooth Scrolling -->
  <script>
    const sidebar = document.getElementById('sidebar');
    const toggleButton = document.getElementById('toggleSidebar');
    
    toggleButton.addEventListener('click', () => {
      sidebar.classList.toggle('hidden');
    });

    // Hide sidebar on small screens by default
    if (window.innerWidth < 1024) {
      sidebar.classList.add('hidden');
    }

    // Expand relevant section based on current URL hash
    document.querySelectorAll('details.dropdown').forEach(details => {
      const summary = details.querySelector('summary');
      const sectionName = summary.getAttribute('data-section');

      summary.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        // Close all other sections
        document.querySelectorAll('details.dropdown').forEach(otherDetails => {
          if (otherDetails !== details && otherDetails.hasAttribute('open')) {
            otherDetails.removeAttribute('open');
          }
        });

        const wasOpen = details.hasAttribute('open');
        if (wasOpen) {
          details.removeAttribute('open');
        } else {
          details.setAttribute('open', '');
          // Update URL and scroll to section
          if (sectionName) {
            const sectionElement = document.getElementById(sectionName);
            if (sectionElement) {
              const headerOffset = 110;
              const elementPosition = sectionElement.getBoundingClientRect().top;
              const offsetPosition = elementPosition + window.scrollY - headerOffset;

              window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth'
              });

              // Update URL with section hash
              history.pushState(null, null, '#' + sectionName);
            }
          }
        }
      });
    });

    window.addEventListener('DOMContentLoaded', () => {
      const hash = window.location.hash.substring(1);
      if (hash) {
        const sectionDetails = document.getElementById('section-' + hash);
        if (sectionDetails) {
          sectionDetails.setAttribute('open', '');
          const sectionElement = document.getElementById(hash);
          if (sectionElement) {
            setTimeout(() => {
              sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 100);
          }
        }
      }
    });

    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        e.stopPropagation();
        const targetId = this.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          const headerOffset = 110;
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.scrollY - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });

          // Update URL with hash
          history.pushState(null, null, '#' + targetId);

          // Open parent section if clicking a sub-item
          const parentSection = targetElement.closest('section');
          if (parentSection && parentSection.id) {
            const sectionDetails = document.getElementById('section-' + parentSection.id);
            if (sectionDetails && !sectionDetails.hasAttribute('open')) {
              // Close others and open this one
              document.querySelectorAll('details.dropdown').forEach(d => d.removeAttribute('open'));
              sectionDetails.setAttribute('open', '');
            }
          }

          // Highlight active link
          document.querySelectorAll('aside a[href^="#"]').forEach(link => {
            link.classList.remove('font-semibold', 'text-primary');
          });
          this.classList.add('font-semibold', 'text-primary');

          // Close sidebar on mobile after clicking
          if (window.innerWidth < 1024) {
            sidebar.classList.add('hidden');
          }
        }
      });
    });

    // Highlight active link based on current hash on page load
    function highlightActiveLink() {
      const hash = window.location.hash;
      if (hash) {
        document.querySelectorAll('aside a[href^="#"]').forEach(link => {
          link.classList.remove('font-semibold', 'text-primary');
          if (link.getAttribute('href') === hash) {
            link.classList.add('font-semibold', 'text-primary');
          }
        });
      }
    }

    // Run on page load
    highlightActiveLink();

    // Simple syntax highlighting - only guaranteed keywords
    function simpleSyntaxHighlight() {
      document.querySelectorAll('pre code').forEach((block) => {
        let html = block.textContent;
        
        // Escape HTML first
        html = html.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        
        // Specific keywords only (purple)
        const keywords = 'curl|def|async|function|try|await|fetch|catch|import|from|require|begin|rescue|end|warn|public|class|private|static|void|package|type|func|return|defmodule|do|case|const|using|if|else|foreach|define';
        html = html.replace(new RegExp('\\b(' + keywords + ')\\b', 'g'), '<span style="color: #c084fc;">$1</span>');
        
        // Curly brackets (cyan)
        html = html.replace(/([{}])/g, '<span style="color: #22d3ee;">$1</span>');
        
        block.innerHTML = html;
      });
    }

    // Run after page loads
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', simpleSyntaxHighlight);
    } else {
      simpleSyntaxHighlight();
    }

    // Run when hash changes
    window.addEventListener('hashchange', highlightActiveLink);
  </script>
</Layouts.site>
